{"version":3,"sources":["App.tsx","components/ConnectWallet.tsx","components/DisconnectWallet.tsx","components/DemnBalance.tsx","components/GetIPFS.tsx","serviceWorker.js","index.js"],"names":["BeaconConnection","ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","contractAddress","setStorage","setBeaconConnection","setPublicToken","wallet","useState","loadingNano","setLoadingNano","setup","userAddress","a","tz","getBalance","balance","toNumber","at","contract","storage","connectWallet","requestPermissions","network","type","NetworkType","MAINNET","rpcUrl","getPKH","console","log","connectNano","TransportU2F","create","transport","ledgerSigner","LedgerSigner","setSignerProvider","signer","publicKeyHash","useEffect","BeaconWallet","name","preferredNetwork","disableDefaultEvents","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","className","onClick","disabled","DisconnectButton","setTezos","disconnectWallet","tezosTK","TezosToolkit","removeAllAccounts","removeAllPeers","destroy","DemnBalance","thisuser","myuserAddress","demnuseraddress","useFetch","i","error","length","key","num","value","Math","pow","GetIPFS","pixeldemncontract","url","ipfslink2","toString","substring","ipfsimage2","ipfslink4","ipfsimage4","dangerouslySetInnerHTML","__html","App","undefined","publicToken","userBalance","copiedPublicToken","setCopiedPublicToken","beaconConnection","activeTab","setActiveTab","isNaN","src","alt","id","href","qr","qrcode","addData","make","createImgTag","generateQrCode","navigator","clipboard","writeText","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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N,sBAAKC,GAAG,OAAR,UAEE,qBAAKA,GAAG,WACN/C,UAAyB,aAAd0C,GAA2B,SAAW,GACjDzC,QAAS,kBAAM0C,GAAa,aAF9B,+BAOA,qBAAKI,GAAG,WACN/C,UAAyB,aAAd0C,GAA2B,SAAW,GACjDzC,QAAS,kBAAM0C,GAAa,aAF9B,yBAOF,qBAAKI,GAAG,SAAR,SACE,sBAAKA,GAAG,UAAR,UACiB,aAAdL,GACC,qBAAKK,GAAG,cAYR,gCACE,oBAAI/C,UAAU,oBAAd,8CAGA,sBAAKA,UAAU,iBAAf,UACE,oCACA,oCACA,oCACA,oCACA,oCACA,oCACA,oCACA,oCACA,oCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qBAAKA,UAAU,QAAf,gBACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,yCAEF,yBAUH,sDAAwB,cAAC,EAAD,CAAaa,cAAezD,IAApD,OACA,2DACA,gCAAK,cAAC,EAAD,CACFyD,cAAezD,EACfqE,kBAAmBA,IAFtB,OAGD,cAAC,EAAD,CACA1E,OAAQA,EACRD,eAAgBA,EAChBL,eAAgBA,EAChBC,eAAgBA,EAChBF,UAAWA,EACX4D,SAAUA,EACVvD,oBAAqBA,IAErB,oDAAuBO,UAG3B,qBAAK2F,GAAG,SAAR,SACE,qBAAKF,IAAI,4BAA4BC,IAAI,mCAIrCT,GAAgBjF,GAAgBkF,EA6CnC,wDA3CL,sBAAKtC,UAAU,WAAf,UACE,qBAAK+C,GAAG,cAAR,SACE,qBACEF,IAAI,8BACJC,IAAI,gBAGR,sBAAKC,GAAG,SAAR,UACE,qBAAKA,GAAG,UAAR,SACE,oBAAG/C,UAAU,oBAAb,gKAGE,uBAHF,iDAKE,mBAAGgD,KAAK,yBAAR,kCACA,uBANF,uBAQE,uBARF,gBAUE,uBAVF,8BAcF,cAAC,EAAD,CACE1G,MAAOA,EACPC,YAAaA,EACbO,eAAgBA,EAChBN,UAAWA,EACXC,eAAgBA,EAChBC,eAAgBA,EAChBE,WAAYA,EACZD,gBA9QsB,uCA+QtBE,oBAAqBA,EACrBE,OAAQA,OAIZ,qBAAKgG,GAAG,SAAR,SACE,qBAAKF,IAAI,4BAA4BC,IAAI,oCA5Q7C,sBAAK9C,UAAU,cAAf,UACE,qBACE6C,IAAI,8BACJC,IAAI,cAEN,sBAAKC,GAAG,SAAR,UACE,mBAAG/C,UAAU,SAAb,qEACA,sBAAK+C,GAAG,UAAR,UACE,oBAAG/C,UAAU,oBAAb,UACE,mBAAGA,UAAU,2BADf,oCAIA,qBACEiC,wBArBW,WACrB,IAAMgB,EAAKC,IAAO,EAAG,KAGrB,OAFAD,EAAGE,QAAQd,GAAe,IAC1BY,EAAGG,OACI,CAAElB,OAAQe,EAAGI,aAAa,IAiBEC,GACzBtD,UAAU,sBAEZ,oBAAG+C,GAAG,eAAN,UACGR,EACC,sBAAMQ,GAAG,4BAAT,SACE,mBAAG/C,UAAU,uBAGf,sBACE+C,GAAG,oBACH9C,QAAS,WACHoC,IACFkB,UAAUC,UAAUC,UAAUpB,GAC9BG,GAAqB,GACrBkB,YAAW,kBAAMlB,GAAqB,KAAQ,OANpD,SAUE,mBAAGxC,UAAU,kBAIjB,kDACgB,+BAAOqC,UAGzB,oBAAGrC,UAAU,oBAAb,qBACWyC,EAAmB,YAAc,wBAIhD,qBAAKM,GAAG,cAAR,SACE,qBAAKF,IAAI,8BACPC,IAAI,qCKjFIa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD0HpB,kBAAmBb,WACrBA,UAAUc,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL5C,QAAQ4C,MAAMA,EAAM0D,c","file":"static/js/main.d84d465b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TezosToolkit, MichelsonMap } from \"@taquito/taquito\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport qrcode from \"qrcode-generator\";\nimport UpdateContract from \"./components/UpdateContract\";\nimport BurnDemns from \"./components/BurnDemns\";\nimport DemnBalance from \"./components/DemnBalance\";\nimport NaTaSBalance from \"./components/NaTaSBalance\";\nimport GetIPFS from \"./components/GetIPFS\";\nimport \"./style.css\";\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\nconst App:React.FC = () => {  \n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https://hangzhounet.api.tez.ie\")\n  );\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState<any>(null);\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [myuserAddress, setmyUserAddress] = useState<string>(\"\");\n  const [pixeldemncontract, setPixeldemncontract] = useState<string>(\"KT1AgMH7AjVGb8G27xjSih4C7pWQSdZ8brSN\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n  const contractAddress: string = \"KT1GBgCd5dk7v4TSzWvtk1X64TxMyG4r7eRX\";\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n    return { __html: qr.createImgTag(4) };\n  };\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"centerImage\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"dialog\">\n          <p className=\"myhead\">Burn 100 DeMN Tokens for a chance to win the NaTaS Pool</p>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"centerImage\">\n          <img src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Natas and Demon Token Logo\"\n          />\n        </div>\n      </div>\n    );\n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"main-box\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"tabs\">\n\n          <div id=\"transfer\"\n            className={activeTab === \"transfer\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"transfer\")}\n          >\n            Staked PixelDeMNs\n          </div>\n\n          <div id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            Earnings\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            {activeTab === \"transfer\" ? (\n              <div id=\"transfers\">\n           {/*}     <h3 className=\"text-align-center\">Burn 100 DeMN Tokens</h3>\n                <h3 className=\"text-align-center\">Win The Prize Pool if your # is 42</h3>\n                <h3 className=\"text-align-center\">Numbers picked during this round are eliminated</h3>\n            <div className=\"area\">Prize Pool: TBD</div> \n                <BurnDemns\n                  Tezos={Tezos}\n                  setUserBalance={setUserBalance}\n                  userAddress={userAddress}\n                />*/}\n              </div>\n            ) : (\n              <div>\n                <h3 className=\"text-align-center\">\n                  Red Numbers have been eliminated\n                </h3>\n                <div className=\"grid-container\">\n                  <div>1</div>\n                  <div>2</div>\n                  <div>3</div>\n                  <div>4</div>\n                  <div>5</div>\n                  <div>6</div>\n                  <div>7</div>\n                  <div>8</div>\n                  <div>9</div>\n                  <div>10</div>\n                  <div>11</div>\n                  <div>12</div>\n                  <div>13</div>\n                  <div>14</div>\n                  <div>15</div>\n                  <div>16</div>\n                  <div>17</div>\n                  <div>18</div>\n                  <div>19</div>\n                  <div>20</div>\n                  <div>21</div>\n                  <div>22</div>\n                  <div>23</div>\n                  <div>24</div>\n                  <div>25</div>\n                  <div>26</div>\n                  <div>27</div>\n                  <div>28</div>\n                  <div>29</div>\n                  <div>30</div>\n                  <div>31</div>\n                  <div>32</div>\n                  <div>33</div>\n                  <div>34</div>\n                  <div>35</div>\n                  <div>36</div>\n                  <div>37</div>\n                  <div>38</div>\n                  <div>39</div>\n                  <div>40</div>\n                  <div>41</div>\n                  <div className=\"blink\">42</div>\n                  <div>43</div>\n                  <div>44</div>\n                  <div>45</div>\n                  <div>46</div>\n                  <div>47</div>\n                  <div>48</div>\n                  <div>49</div>\n                  <div>50</div>\n                  <div>51</div>\n                  <div>52</div>\n                  <div>53</div>\n                  <div>54</div>\n                  <div>55</div>\n                  <div>56</div>\n                  <div>57</div>\n                  <div>58</div>\n                  <div>59</div>\n                  <div>60</div>\n                  <div>61</div>\n                  <div>62</div>\n                  <div>63</div>\n                  <div>64</div>\n                  <div>65</div>\n                  <div>66</div>\n                  <div>67</div>\n                  <div>68</div>\n                  <div>69</div>\n                  <div>70</div>\n                  <div>71</div>\n                  <div>72</div>\n                  <div>73</div>\n                  <div>74</div>\n                  <div>75</div>\n                  <div>76</div>\n                  <div>77</div>\n                  <div>78</div>\n                  <div>79</div>\n                  <div>80</div>\n                  <div>81</div>\n                  <div>82</div>\n                  <div>83</div>\n                  <div>84</div>\n                  <div>85</div>\n                  <div>86</div>\n                  <div>87</div>\n                  <div>88</div>\n                  <div>89</div>\n                  <div>90</div>\n                  <div>91</div>\n                  <div>92</div>\n                  <div>93</div>\n                  <div>94</div>\n                  <div>95</div>\n                  <div>96</div>\n                  <div>97</div>\n                  <div>98</div>\n                  <div>99</div>\n                  <div>100</div> \n                </div>\n                <p></p>\n           {/*     <UpdateContract\n                  contract={contract}\n                  setUserBalance={setUserBalance}\n                  Tezos={Tezos}\n                  userAddress={userAddress}\n                  setStorage={setStorage}\n           />    */}                     \n              </div>\n            )}\n             <p> DeMN Token Balance: <DemnBalance myuserAddress={userAddress} /> </p> \n             <h2>Your Series II PixelDeMNs</h2>\n             <div><GetIPFS \n                myuserAddress={userAddress} \n                pixeldemncontract={pixeldemncontract}/> </div> \n            <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n            <p>Address Logged In: {userAddress}</p>\n          </div>    \n        </div>\n        <div id=\"footer\">\n          <img src=\"/images/natas_demn_sm.png\" alt=\"Natas and Demn Token Logo\" />\n        </div>\n      </div>\n    );\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div className=\"main-box\">\n        <div id=\"centerImage\">\n          <img\n            src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Buy Natas\"\n          />\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              Burn 100 of your DeMN Tokens and you will have a 1 in 100 chance to win the\n              NaTaS Token Prize Pool. As numbers are eliminated your odds get better.\n              <br />\n              If you have not done so already, go to the&nbsp;\n              <a href=\"https://natastoken.xyz\"> NaTaS Token Website</a>\n              <br />\n              for more information\n              <br />\n              Happy Burning\n              <br />\n              Beta Test - Not Public\n            </p>\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            wallet={wallet}\n          />\n        </div>\n\n        <div id=\"footer\">\n          <img src=\"/images/natas_demn_sm.png\" alt=\"Natas and Demon Token Logo\" />\n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n}\n\n\nexport default App\n\n","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n   // setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.MAINNET,\n          rpcUrl: \"https://mainnet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"NaTaS Burner\",\n        preferredNetwork: NetworkType.MAINNET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\ninterface ButtonProps {\n  wallet: BeaconWallet | null;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setTezos: Dispatch<SetStateAction<TezosToolkit>>;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n}\n\nconst DisconnectButton = ({\n  wallet,\n  setPublicToken,\n  setUserAddress,\n  setUserBalance,\n  setWallet,\n  setTezos,\n  setBeaconConnection\n}: ButtonProps): JSX.Element => {\n  const disconnectWallet = async (): Promise<void> => {\n    //window.localStorage.clear();\n    setUserAddress(\"\");\n    setUserBalance(0);\n    setWallet(null);\n    const tezosTK = new TezosToolkit(\"https://api.tez.ie/rpc/granadanet\");\n    setTezos(tezosTK);\n    setBeaconConnection(false);\n    setPublicToken(null);\n    console.log(\"disconnecting wallet\");\n    if (wallet) {\n      await wallet.client.removeAllAccounts();\n      await wallet.client.removeAllPeers();\n      await wallet.client.destroy();\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={disconnectWallet}>\n        <i className=\"fas fa-times\"></i>&nbsp; Disconnect wallet\n      </button>\n    </div>\n  );\n};\n\nexport default DisconnectButton;\n","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  key: string\n  value: number\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\n\nconst DemnBalance = ({myuserAddress}: DemnBalanceProps) => {\n  const url = `https://api.tzkt.io/v1/bigmaps/16845/keys?active=true&select=key,value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  let i = 0 \n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) {\n    if ( data[i].key == thisuser) {\n      var num = data[i].value / Math.pow(10, 8);\n      return <span>{num}</span>\n    \n    }\n  }\n  \n  return <section>\n  <p> {demnuseraddress} You have no DeMN Tokens?</p>\n</section>\n}\n\nexport default DemnBalance;\n  ","import React, { useState } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\n\ninterface Post {\n  nat: number, \n  address: string,\n  value: number\n};\n\ninterface DemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string\n              };\n\nconst GetIPFS = ({myuserAddress, pixeldemncontract}: DemnBalanceProps) => {\n  const [rawdata, setRawdata] = useState<string>(\"hjk\");\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?active=true&token.contract=${pixeldemncontract}&account=${myuserAddress}&select=token.metadata.image`\n  const thisuser = myuserAddress\n  const { data, error } = useFetch<Post[]>(url)\n  if (error) return <p>There is an error.</p>\n  if (data) {\n      var ipfslink = data;\n      var ipfslink2 = ipfslink.toString(); \n      var ipfslink2 = ipfslink2.substring(7, 53);\n      var ipfsimage2 = `<img src = \"https://ipfs.io/ipfs/${ipfslink2}\" width=\"300\" height=\"300\">`\n      var ipfslink3 = data;\n      var ipfslink4 = ipfslink3.toString(); \n      var ipfslink4 = ipfslink4.substring(61, 107);\n      var ipfsimage4 = `<img src = \"https://ipfs.io/ipfs/${ipfslink4}\" width=\"300\" height=\"300\">`\n     return ( <div>\n                <div dangerouslySetInnerHTML={{__html: ipfsimage2}} />\n                <div dangerouslySetInnerHTML={{__html: ipfsimage4}} />\n            </div> )\n  }\n  \n\n  return <p>I Can Not Find Your PixelDeMNs (only Series II and III are compatable)</p>\n}\n\nexport default GetIPFS;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}