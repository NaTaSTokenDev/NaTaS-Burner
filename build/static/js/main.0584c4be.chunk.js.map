{"version":3,"sources":["components/ConnectWallet.tsx","components/DemnBalance.tsx","components/DisconnectWallet.tsx","components/MyDeMNs.tsx","components/MyDeMNs_SIV.tsx","App.tsx","components/MyDeMNs_SI.tsx","components/NatasBalance.tsx","components/Crunchy_DeMN.tsx","components/Crunchy_Natas.tsx","components/SendDeMN.tsx","serviceWorker.js","index.js"],"names":["ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","contractAddress","setStorage","setBeaconConnection","setPublicToken","wallet","useState","loadingNano","setLoadingNano","setup","userAddress","a","tz","getBalance","balance","toNumber","at","contract","storage","connectWallet","requestPermissions","network","type","NetworkType","MAINNET","rpcUrl","getPKH","console","log","connectNano","TransportU2F","create","transport","ledgerSigner","LedgerSigner","setSignerProvider","signer","publicKeyHash","useEffect","BeaconWallet","name","preferredNetwork","disableDefaultEvents","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","className","onClick","disabled","DemnBalance","thisuser","myuserAddress","useFetch","i","error","length","key","num","value","Math","pow","DisconnectButton","setTezos","disconnectWallet","tezosTK","TezosToolkit","removeAllAccounts","removeAllPeers","destroy","MyDeMNs","pixeldemncontract","url","mydemnsowned","setmyDemnsowned","bob","ipfslink2","JSON","stringify","toString","substring","dangerouslySetInnerHTML","__html","MyDeMNs_SIV","BeaconConnection","MyDeMNs_SI","NatasBalance","Crunchy_DeMN","undefined","Crunchy_Natas","SendDeMN","recipient","amount","loading","setLoading","sendTransfer","address","methods","transfer","from_","txs","to_","token_id","send","id","App","publicToken","userBalance","copiedPublicToken","setCopiedPublicToken","beaconConnection","activeTab","setActiveTab","isNaN","src","alt","width","height","href","target","qr","qrcode","addData","make","createImgTag","generateQrCode","navigator","clipboard","writeText","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0584c4be.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n   // setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.MAINNET,\n          rpcUrl: \"https://mainnet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"NaTaS Burner\",\n        preferredNetwork: NetworkType.MAINNET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp;Connect w/ wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp;Connect w/ Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  key: string\n  value: number\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\n\nconst DemnBalance = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://api.tzkt.io/v1/bigmaps/16845/keys?active=true&select=key,value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  let i = 0 \n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) \n    {\n    if ( data[i].key == thisuser) \n      {\n      var num = data[i].value / Math.pow(10, 8);\n      return <span>{num}</span>\n      }\n    }\n  return <span>0</span>\n}\n\nexport default DemnBalance;\n  ","import React, { Dispatch, SetStateAction } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\ninterface ButtonProps {\n  wallet: BeaconWallet | null;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setTezos: Dispatch<SetStateAction<TezosToolkit>>;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n}\n\nconst DisconnectButton = ({\n  wallet,\n  setPublicToken,\n  setUserAddress,\n  setUserBalance,\n  setWallet,\n  setTezos,\n  setBeaconConnection\n}: ButtonProps): JSX.Element => {\n  const disconnectWallet = async (): Promise<void> => {\n    //window.localStorage.clear();\n    setUserAddress(\"\");\n    setUserBalance(0);\n    setWallet(null);\n    const tezosTK = new TezosToolkit(\"https://api.tez.ie/rpc/granadanet\");\n    setTezos(tezosTK);\n    setBeaconConnection(false);\n    setPublicToken(null);\n    console.log(\"disconnecting wallet\");\n    if (wallet) {\n      await wallet.client.removeAllAccounts();\n      await wallet.client.removeAllPeers();\n      await wallet.client.destroy();\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={disconnectWallet}>\n        <i className=\"fas fa-times\"></i>&nbsp; Disconnect wallet\n      </button>\n    </div>\n  );\n};\n\nexport default DisconnectButton;\n","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned: number\n                setmyDemnsowned: Dispatch<SetStateAction<number>>;\n              };\n              \n\nfunction MyDeMNs ({myuserAddress, pixeldemncontract, mydemnsowned, setmyDemnsowned}: IDemnBalanceProps) \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?active=true&token.contract=${pixeldemncontract}&account=${myuserAddress}&select=token.metadata.image`\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>Network connection?</p>\n  if (!data) return <span>Loading...</span>\n  //setmyDemnsowned(data.length + mydemnsowned)\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<img src = \"https://ipfs.io/ipfs/${ipfslink2}\" width=\"150\" height=\"150\">`;\n     \n    bob = ipfsimage + \" \" + bob\n    }\n\n\n\n      return (\n        <div>\n          <div dangerouslySetInnerHTML={{__html: bob}} />\n        </div> \n             ) \n      }  \n\nexport default MyDeMNs;","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned: number\n                setmyDemnsowned: Dispatch<SetStateAction<number>>;\n              };\n              \nfunction MyDeMNs_SIV ({myuserAddress, pixeldemncontract, mydemnsowned, setmyDemnsowned}: IDemnBalanceProps) \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?account=${myuserAddress}&balance=1&token.metadata.symbol=OBJKT&token.metadata.tags.[*]=PixelDeMNs&select=token.metadata.artifactUri`\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>Network connection?</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<img src = \"https://ipfs.io/ipfs/${ipfslink2} width=\"150\" height=\"150\"/>`;\n    bob = ipfsimage + \" \" + bob\n    }\n      return (\n        <div>\n          <div dangerouslySetInnerHTML={{__html: bob}} />\n        </div> \n             ) \n\n\n             \n      }  \n\nexport default MyDeMNs_SIV;","import { TezosToolkit } from \"@taquito/taquito\";\nimport qrcode from \"qrcode-generator\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DemnBalance from \"./components/DemnBalance\";\nimport Demnsowned from \"./components/Demnsowned\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport MyDeMNs from \"./components/MyDeMNs\";\nimport MyDeMNs_SIV from \"./components/MyDeMNs_SIV\";\nimport MyDeMNs_SI from \"./components/MyDeMNs_SI\";\nimport NatasBalance from \"./components/NatasBalance\";\nimport Crunchy_DeMN from \"./components/Crunchy_DeMN\";\nimport Crunchy_Natas from \"./components/Crunchy_Natas\";\nimport SendDeMN from \"./components/SendDeMN\";\nimport SendNFT from \"./components/SendDeMN\";\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\nconst App:React.FC = () => {  \n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https:/mainnet.api.tez.ie\")\n  );\n  \n  // const [aredata, setAredata] = useState([]);\n  const [mydemnsowned, setmyDemnsowned] = useState<number>(0);\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [pixeldemncontract, setPixeldemncontract] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n  const contractAddress: string = \"KT1GBgCd5dk7v4TSzWvtk1X64TxMyG4r7eRX\";\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n    return { __html: qr.createImgTag(4) };\n  };\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"centerImage\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"dialog\">\n          <p className=\"myhead\">pixeldemn.xyz</p>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"centerImage\">\n          <img src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Natas and Demon Token Logo\"\n          />\n        </div>\n      </div>\n    );\n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"main-box\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"tabs\">\n\n          <div id=\"transfer\"\n            className={activeTab === \"transfer\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"transfer\")}\n          >\n            Staked PixelDeMNs\n          </div>\n\n          <div id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            NFTs for DeMNs\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            {activeTab === \"transfer\" ? (\n              <div>\n                <br />\n                <h2>Your Series I PixelDeMNs</h2>\n                <div>\n                <MyDeMNs_SI\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton'\n                  mydemnsowned={mydemnsowned}\n                  setmyDemnsowned={setmyDemnsowned} />\n                <br />\n                </div>\n                <h2>Your Series II PixelDeMNs</h2>\n                <div>\n                <MyDeMNs\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1QctVjmHzMTBBmHLwoYToaodEx7n1BXG1b'\n                  mydemnsowned={mydemnsowned}\n                  setmyDemnsowned={setmyDemnsowned}\n                 />\n                  <br />\n                </div>\n                <h2>Your Series III PixelDeMNs</h2>\n                <MyDeMNs\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1AgMH7AjVGb8G27xjSih4C7pWQSdZ8brSN'\n                  mydemnsowned={mydemnsowned}\n                  setmyDemnsowned={setmyDemnsowned}\n                   />\n                <br />\n                <h2>Your Series IV PixelDeMNs</h2>\n               <MyDeMNs_SIV\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1QctVjmHzMTBBmHLwoYToaodEx7n1BXG1b'\n               mydemnsowned={mydemnsowned}  \n               setmyDemnsowned={setmyDemnsowned} /> \n                <br />\n                <p> DeMN Token Balance:  <DemnBalance myuserAddress={userAddress} /> </p>\n                <p> NaTaS Token Balance: <NatasBalance myuserAddress={userAddress} /> </p>\n                <p> Staked NaTaS LP on Crunchy.Network: Coming Soon</p>\n                <p> Staked DeMN LP on Crunchy.Network: Coming Soon</p>\n                <p> UnStaked NaTaS LP / Quipuswap: <Crunchy_Natas myuserAddress={userAddress} /></p>\n                <p> UnStaked DeMN LP / Quipuswap: <Crunchy_DeMN myuserAddress={userAddress} /> </p>  \n                <br />\n                <br />\n                  <h2>Total Staked PixelDeMNs</h2>\n                  <p>{mydemnsowned}</p>\n                  {/*<Demnsowned\n                    myuserAddress={userAddress}\n                    pixeldemncontract='KT1QctVjmHzMTBBmHLwoYToaodEx7n1BXG1b'\n                  mydemnsowned={mydemnsowned}\n                  /> */}\n                  <br />\n                  <h2>Total DeMN Tokens Earned</h2>\n                  <h3>(Coming Soon)</h3>\n                  <br />\n                  <h2>DeMN Tokens Earned This week</h2>\n                  <h3>(Coming Soon)</h3>\n                  <br />\n                  <h2>Current DeMN Token Multiplier</h2>\n                  <h3>X 0.00 (Coming Soon)</h3>\n                  <br />\n                  <h2>PixelDeMNs Stats</h2>\n                  <h3>- 50 unique owners -</h3>\n                  <h3>- 178 Unique PixelDeMNs so far -</h3>\n                  <h3>- PixelDeMNs earn 21 DeMN Tokens per\\wk -</h3>\n                  <br />\n              </div> \n            ) : (\n                <div>\n                  <h2>Exclusive NFTs</h2> \n                  <br />\n                  <h2>Buy with DeMN Tokens</h2> \n                  <br />\n                  <img\n          src=\"/images/mask.jpg\" width=\"200\" height=\"200\"\n          alt=\"Default PixelDeMN Image Placetaker\"\n        />\n        <div id=\"transfers\">\n                <h3 className=\"text-align-center\">Burn some DeMNs</h3>\n                <p>Receive a DeMN Horde NFT for 666 DeMN Tokens</p>\n                <p>333 of you DeMN Tokens will be Burned</p>\n                <p>Only PixelDeMN NFTs earn DeMN Token Drops</p>\n                <p>Series V PixelDeMNs will be avalible here first!</p>\n                <SendDeMN\n                  Tezos={Tezos}\n                  setUserBalance={setUserBalance}\n                  userAddress={userAddress}\n                />\n              </div>\n                </div>          \n            )}\n            <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n            <p>{userAddress}</p>\n            <br />\n            <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\" target=\"_blank\">\n            <img src=\"/images/pixeldemnsonobjkt.png\" height=\"150\" />\n      </a>\n          </div>    \n        </div>\n        <div id=\"footer\">\n        <a href=\"https://natastoken.xyz\"> NaTaSToken.xyz </a>\n        </div>\n      </div>\n    );\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div className=\"main-box\">\n        <div id=\"centerImage\">\n          <img\n            src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Buy Natas\"\n          />\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              Earn DeMN Tokens with your PixelDeMNS\n              <br />\n              If you have not done so already, go to the&nbsp;\n              <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\"> PixelDeMN Objkt page </a>\n              <br />\n              to get a PixelDeMN and Start Earning\n              <br />\n              Thanks\n              <br />\n              Beta Test - Not Public\n            </p>\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            wallet={wallet}\n          />\n          <br />\n          <br />\n           <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\" target=\"_blank\">\n            <img src=\"/images/pixeldemnsonobjkt.png\" height=\"150\" />\n          </a>\n        </div>\n\n        <div id=\"footer\">\n         \n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n}\n\n\nexport default App\n\n","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned: number\n                setmyDemnsowned: Dispatch<SetStateAction<number>>;\n              };\n              \nconst MyDeMNs_SI = ({myuserAddress, pixeldemncontract, mydemnsowned, setmyDemnsowned}: IDemnBalanceProps) => \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?account=${myuserAddress}&balance=1&token.metadata.symbol=OBJKT&token.metadata.tags.[*]=PixelDeMNs&select=token.metadata.artifactUri`\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>Network connection?</p>\n  if (!data) return <span>Loading...</span>\n  //const rad = setmyDemnsowned(data.length);\n  console.log(data.length)\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<img src = \"https://ipfs.io/ipfs/${ipfslink2} width=\"150\" height=\"150\"/>`;\n    bob = ipfsimage + \" \" + bob\n    }\n      return (\n        <div>\n          <div dangerouslySetInnerHTML={{__html: bob}} />\n        </div> \n             )              \n      }  \n\nexport default MyDeMNs_SI;","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  key: string\n  value: number\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\n\nconst NatasBalance = ({myuserAddress}: DemnBalanceProps) => {\n  const url = `https://api.tzkt.io/v1/bigmaps/14771/keys?active=true&select=key,value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  let i = 0 \n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) {\n    if ( data[i].key == thisuser) {\n      var num = data[i].value / Math.pow(10, 0);\n      return <span>{num}</span>\n    }\n  }\n  \n  return <span>0</span>\n}\n\nexport default NatasBalance;\n  ","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  balance: any\n  allowances: any\n  frozen_balance: string\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\nconst Crunchy_DeMN = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://staging.api.tzkt.io/v1/bigmaps/14780/keys?active=true&key=${myuserAddress}&select=value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  if (data.length == 1) \n    {\n      {\n        if (data[0].balance != undefined) \n        {let num = data[0].balance / Math.pow(10, 6);\n          return <span>{num}</span>}\n          }\n    }\n      \n  return <span>0</span>\n}\n  export default Crunchy_DeMN;\n  ","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  balance: number\n  allowances: any\n  frozen_balance: string\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\nconst Crunchy_Natas = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://staging.api.tzkt.io/v1/bigmaps/16858/keys?active=true&key=${myuserAddress}&select=value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  if (data.length == 1) \n    {\n      {\n        if (data[0].balance != undefined) \n        {let num = data[0].balance / Math.pow(10, 6);\n          return <span>{num}</span>}\n          }\n    }\n    return <p>0</p>\n    }\nexport default Crunchy_Natas;\n  ","import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\nconst SendDeMN = ({\n  Tezos,\n  setUserBalance,\n  userAddress\n}: {\n  Tezos: TezosToolkit;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  userAddress: string;\n}): JSX.Element => {\n  const [recipient, setRecipient] = useState<string>(\"tz1XQZVcQbSA56cf5ZKGGeM9jH4qzfwYL8rk\");\n  const [amount, setAmount] = useState<string>(\"1\");\n  const [loading, setLoading] = useState<boolean>(false);\n  //const wallet = new BeaconWallet({ name: \"Beacon Docs\" });\n\n\n  const sendTransfer = async (): Promise<void> =>  {\n    if (recipient && amount)  {\n      setLoading(true);\n     \n      try {\n        const op = await Tezos.wallet\n      //  Tezos.setWalletProvider(wallet);\n        const address = userAddress; \n        const contract = await Tezos.wallet.at(\n          \"KT1GBgCd5dk7v4TSzWvtk1X64TxMyG4r7eRX\"\n         );\n        const TOKEN_ID = 0; \n        const result = await contract.methods\n        .transfer([\n          {\n            from_: address,\n            txs: [\n              {\n                to_: recipient,\n                token_id: TOKEN_ID,\n                amount: 1,\n              },\n            ],\n          },\n        ])\n        .send();\n     //   await result;\n    //  } catch (error) {\n    //    console.log(error);\n      } finally {\n        setLoading(false);\n      }\n      \n      // As soon as the operation is broadcast, you will receive the operation hash\n       // return result.opHash;\n    \n\n\n      setLoading(true);\n  //    try {\n  //      const op = await Tezos.wallet\n  //        .transfer({ to: recipient, amount: parseInt(amount) })\n   //       .send();\n   //     await op.confirmation();\n       \n   //     const balance = await Tezos.tz.getBalance(userAddress);\n    //    setUserBalance(balance.toNumber());\n    //  } catch (error) {\n    //    console.log(error);\n    //  } finally {\n     //   setLoading(false);\n     // }\n    }\n      }     ;\n\n  return (\n      <div id=\"transfer-inputs\">\n      <button\n        className=\"button\"\n        disabled={!recipient && !amount}  \n        onClick={sendTransfer}\n      >\n        {loading ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Processing\n          </span>\n        ) : (\n          <span>\n            <i className=\"far fa fa-fire\"></i>&nbsp; BURN!\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default SendDeMN;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}