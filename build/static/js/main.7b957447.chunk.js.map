{"version":3,"sources":["components/ConnectWallet.tsx","components/DemnBalance.tsx","components/Demnsowned.tsx","components/DisconnectWallet.tsx","components/MyDeMNs.tsx","components/MyDeMNs_SI.tsx","App.tsx","components/NatasBalance.tsx","components/Crunchy_DeMN.tsx","components/Crunchy_Natas.tsx","serviceWorker.js","index.js"],"names":["ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","contractAddress","setStorage","setBeaconConnection","setPublicToken","wallet","useState","loadingNano","setLoadingNano","setup","userAddress","a","tz","getBalance","balance","toNumber","at","contract","storage","connectWallet","requestPermissions","network","type","NetworkType","MAINNET","rpcUrl","getPKH","console","log","connectNano","TransportU2F","create","transport","ledgerSigner","LedgerSigner","setSignerProvider","signer","publicKeyHash","useEffect","BeaconWallet","name","preferredNetwork","disableDefaultEvents","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","className","onClick","disabled","DemnBalance","thisuser","myuserAddress","useFetch","i","error","length","key","num","value","Math","pow","Demnsowned","pixeldemncontract","mydemnsowned","url","bob","ipfsimage","ipfslink2","JSON","stringify","toString","substring","DisconnectButton","setTezos","disconnectWallet","tezosTK","TezosToolkit","removeAllAccounts","removeAllPeers","destroy","MyDeMNs","dangerouslySetInnerHTML","__html","MyDeMNs_SI","BeaconConnection","NatasBalance","Crunchy_DeMN","undefined","Crunchy_Natas","App","publicToken","userBalance","copiedPublicToken","setCopiedPublicToken","beaconConnection","activeTab","setActiveTab","isNaN","src","alt","id","href","target","height","qr","qrcode","addData","make","createImgTag","generateQrCode","navigator","clipboard","writeText","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7b957447.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n   // setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.MAINNET,\n          rpcUrl: \"https://mainnet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"NaTaS Burner\",\n        preferredNetwork: NetworkType.MAINNET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp;Connect w/ wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp;Connect w/ Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  key: string\n  value: number\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\n\nconst DemnBalance = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://api.tzkt.io/v1/bigmaps/16845/keys?active=true&select=key,value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  let i = 0 \n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) \n    {\n    if ( data[i].key == thisuser) \n      {\n      var num = data[i].value / Math.pow(10, 8);\n      return <span>{num}</span>\n      }\n    }\n  return <span>0</span>\n}\n\nexport default DemnBalance;\n  ","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned?: number\n              };\n              \nfunction Demnsowned ({myuserAddress, pixeldemncontract, mydemnsowned}: IDemnBalanceProps) \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?active=true&token.contract=${pixeldemncontract}&account=tz1VhCvo2M7ne6GihA46hqhEoPceFo1Kbhg5&select=token.metadata.image`\n  var argh = ''\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  mydemnsowned = (data.length)\n  console.log(mydemnsowned)\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<div><img src = \"https://ipfs.io/ipfs/${ipfslink2}\" width=\"200\" height=\"200\"></div>`;\n    console.log(ipfsimage); \n    bob = ipfsimage + \" \" + bob\n    }\n      return (\n        <div>\n          <h3>{mydemnsowned}</h3>\n        </div> \n             ) \n      }  \n\nexport default Demnsowned;","import React, { Dispatch, SetStateAction } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\ninterface ButtonProps {\n  wallet: BeaconWallet | null;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setTezos: Dispatch<SetStateAction<TezosToolkit>>;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n}\n\nconst DisconnectButton = ({\n  wallet,\n  setPublicToken,\n  setUserAddress,\n  setUserBalance,\n  setWallet,\n  setTezos,\n  setBeaconConnection\n}: ButtonProps): JSX.Element => {\n  const disconnectWallet = async (): Promise<void> => {\n    //window.localStorage.clear();\n    setUserAddress(\"\");\n    setUserBalance(0);\n    setWallet(null);\n    const tezosTK = new TezosToolkit(\"https://api.tez.ie/rpc/granadanet\");\n    setTezos(tezosTK);\n    setBeaconConnection(false);\n    setPublicToken(null);\n    console.log(\"disconnecting wallet\");\n    if (wallet) {\n      await wallet.client.removeAllAccounts();\n      await wallet.client.removeAllPeers();\n      await wallet.client.destroy();\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={disconnectWallet}>\n        <i className=\"fas fa-times\"></i>&nbsp; Disconnect wallet\n      </button>\n    </div>\n  );\n};\n\nexport default DisconnectButton;\n","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned: number\n              };\n              \n\nfunction MyDeMNs ({myuserAddress, pixeldemncontract, mydemnsowned}: IDemnBalanceProps) \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?active=true&token.contract=${pixeldemncontract}&account=${myuserAddress}&select=token.metadata.image`\n  var argh = ''\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>Network connection?</p>\n  if (!data) return <span>Loading...</span>\n  mydemnsowned = (data.length) + mydemnsowned\n  console.log(mydemnsowned)\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<div><img src = \"https://ipfs.io/ipfs/${ipfslink2}\" width=\"200\" height=\"200\"></div>`;\n     \n    bob = ipfsimage + \" \" + bob\n    }\n      return (\n        <div>\n          <div className=\"box\" dangerouslySetInnerHTML={{__html: bob}} />\n        </div> \n             ) \n      }  \n\nexport default MyDeMNs;","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface IPost {data: string};\n\ninterface IDemnBalanceProps {\n                myuserAddress: string,\n                pixeldemncontract: string,\n                mydemnsowned: number\n              };\n              \nfunction MyDeMNs_SI ({myuserAddress, pixeldemncontract, mydemnsowned}: IDemnBalanceProps) \n  {\n  var url = `https://staging.api.tzkt.io/v1/tokens/balances?account=${myuserAddress}&balance=1&token.metadata.symbol=OBJKT&token.metadata.tags.[*]=PixelDeMNs&select=token.metadata.artifactUri`\n  var argh = ''\n  let i = 0\n  let bob = \"\"\n  var ipfsimage = ''\n  const { data, error } = useFetch<IPost[]>(url);\n  if (error) return <p>Network connection?</p>\n  if (!data) return <span>Loading...</span>\n  mydemnsowned = (data.length) + mydemnsowned\n  console.log(mydemnsowned)\n  for (i = 0; i < data.length; i++) \n    {\n    var ipfslink = JSON.stringify(data[i])\n    var ipfslink2 = ipfslink.toString(); \n    var ipfslink2 = ipfslink2.substring(7);\n    var ipfsimage = `<div><img src = \"https://ipfs.io/ipfs/${ipfslink2} width=\"200\" height=\"200\"/></div>`;\n    console.log(ipfsimage); \n    bob = ipfsimage + \" \" + bob\n    }\n      return (\n        <div>\n          <div dangerouslySetInnerHTML={{__html: bob}} />\n        </div> \n             ) \n      }  \n\nexport default MyDeMNs_SI;","import { TezosToolkit } from \"@taquito/taquito\";\nimport qrcode from \"qrcode-generator\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DemnBalance from \"./components/DemnBalance\";\nimport Demnsowned from \"./components/Demnsowned\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport MyDeMNs from \"./components/MyDeMNs\";\nimport MyDeMNs_SIV from \"./components/MyDeMNs_SIV\";\nimport MyDeMNs_SI from \"./components/MyDeMNs_SI\";\nimport NatasBalance from \"./components/NatasBalance\";\nimport Crunchy_DeMN from \"./components/Crunchy_DeMN\";\nimport Crunchy_Natas from \"./components/Crunchy_Natas\";\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\nconst App:React.FC = () => {  \n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https:/mainnet.api.tez.ie\")\n  );\n  \n  // const [aredata, setAredata] = useState([]);\n  const [mydemnsowned, setmyDemnsowned] = useState<number>(0);\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [pixeldemncontract, setPixeldemncontract] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n  const contractAddress: string = \"KT1GBgCd5dk7v4TSzWvtk1X64TxMyG4r7eRX\";\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n    return { __html: qr.createImgTag(4) };\n  };\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"centerImage\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"dialog\">\n          <p className=\"myhead\">pixeldemn.xyz</p>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"centerImage\">\n          <img src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Natas and Demon Token Logo\"\n          />\n        </div>\n      </div>\n    );\n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"main-box\">\n        <img\n          src=\"/images/NatasBurnerLogo.png\"\n          alt=\"Buy Natas\"\n        />\n        <div id=\"tabs\">\n\n          <div id=\"transfer\"\n            className={activeTab === \"transfer\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"transfer\")}\n          >\n            Staked PixelDeMNs\n          </div>\n\n          <div id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            Earnings\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            {activeTab === \"transfer\" ? (\n              <div>\n                <br />\n                <h2>Your Series I PixelDeMNs</h2>\n                <MyDeMNs_SI\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton'\n                  mydemnsowned={mydemnsowned} />\n                <br />\n                <h2>Your Series II PixelDeMNs</h2>\n                <MyDeMNs\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1QctVjmHzMTBBmHLwoYToaodEx7n1BXG1b'\n                  mydemnsowned={mydemnsowned} />\n                <br />\n                <h2>Your Series III PixelDeMNs</h2>\n                <MyDeMNs\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1AgMH7AjVGb8G27xjSih4C7pWQSdZ8brSN'\n                  mydemnsowned={mydemnsowned} />\n                <br />\n                <h2>Your Series IV PixelDeMNs</h2>\n               {/* <MyDeMNs_SIV\n                  myuserAddress={userAddress}\n                  pixeldemncontract='KT1KEa8z6vWXDJrVqtMrAeDVzsvxat3kHaCE'\n               mydemnsowned={mydemnsowned} /> */}\n                <br />\n                <p> DeMN Token Balance:  <DemnBalance myuserAddress={userAddress} /> </p>\n                <p> NaTaS Token Balance: <NatasBalance myuserAddress={userAddress} /> </p>\n                <p> Staked NaTaS LP on Crunchy.Network: Coming Soon</p>\n                <p> Staked DeMN LP on Crunchy.Network: Coming Soon</p>\n                <p> UnStaked NaTaS LP / Quipuswap: <Crunchy_Natas myuserAddress={userAddress} /></p>\n                <p> UnStaked DeMN LP / Quipuswap: <Crunchy_DeMN myuserAddress={userAddress} /> </p>  \n                <br />\n              </div> \n            ) : (\n                <div>\n                  <br />\n                  <h2>Total Staked PixelDeMNs</h2>\n                  <Demnsowned\n                    myuserAddress={userAddress}\n                    pixeldemncontract='KT1QctVjmHzMTBBmHLwoYToaodEx7n1BXG1b'\n                    mydemnsowned={mydemnsowned}\n                  />\n                  <br />\n                  <h2>Total DeMN Tokens Earned</h2>\n                  <h3>21</h3>\n                  <br />\n                  <h2>DeMN Tokens Earned This week</h2>\n                  <h3>21</h3>\n                  <br />\n                  <h2>Current DeMN Token Multiplier</h2>\n                  <h3>X 0.00 (Coming Soon)</h3>\n                  <br />\n                  <h2>PixelDeMNs Stats</h2>\n                  <h3>- 50 unique owners -</h3>\n                  <h3>- 178 Unique PixelDeMNs so far -</h3>\n                  <h3>- PixelDeMNs earn 21 DeMN Tokens per\\wk -</h3>\n                  <br />\n                </div>          \n            )}\n          {/*  //   footer area <p></p>   */}\n            <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n            <p>{userAddress}</p>\n            <br />\n            <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\" target=\"_blank\">\n            <img src=\"/images/pixeldemnsonobjkt.png\" height=\"150\" />\n      </a>\n          </div>    \n        </div>\n        <div id=\"footer\">\n        </div>\n      </div>\n    );\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div className=\"main-box\">\n        <div id=\"centerImage\">\n          <img\n            src=\"/images/NatasBurnerLogo.png\"\n            alt=\"Buy Natas\"\n          />\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              Earn DeMN Tokens with your PixelDeMNS\n              <br />\n              If you have not done so already, go to the&nbsp;\n              <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\"> PixelDeMN Objkt page </a>\n              <br />\n              to get a PixelDeMN and Start Earning\n              <br />\n              Thanks\n              <br />\n              Beta Test - Not Public\n            </p>\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            wallet={wallet}\n          />\n          <br />\n          <br />\n           <a href=\"https://objkt.com/profile/tz1SrztDp8MVcbom6T8FMPSRFns4PGFoFqxx/collections\" target=\"_blank\">\n            <img src=\"/images/pixeldemnsonobjkt.png\" height=\"150\" />\n          </a>\n        </div>\n\n        <div id=\"footer\">\n         \n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n}\n\n\nexport default App\n\n","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  key: string\n  value: number\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\n\nconst NatasBalance = ({myuserAddress}: DemnBalanceProps) => {\n  const url = `https://api.tzkt.io/v1/bigmaps/14771/keys?active=true&select=key,value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  let i = 0 \n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  for (i = 0; i < data.length; i++) {\n    if ( data[i].key == thisuser) {\n      var num = data[i].value / Math.pow(10, 0);\n      return <span>{num}</span>\n    }\n  }\n  \n  return <span>0</span>\n}\n\nexport default NatasBalance;\n  ","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  balance: any\n  allowances: any\n  frozen_balance: string\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\nconst Crunchy_DeMN = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://staging.api.tzkt.io/v1/bigmaps/14780/keys?active=true&key=${myuserAddress}&select=value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  if (data.length == 1) \n    {\n      {\n        if (data[0].balance != undefined) \n        {let num = data[0].balance / Math.pow(10, 6);\n          return <span>{num}</span>}\n          }\n    }\n      \n  return <span>0</span>\n}\n  export default Crunchy_DeMN;\n  ","import React, { useState, Dispatch, SetStateAction, useEffect, PropsWithChildren } from \"react\";\nimport useFetch from \"react-fetch-hook\";\n\ninterface Post {\n  balance: number\n  allowances: any\n  frozen_balance: string\n};\n\ninterface DemnBalanceProps {myuserAddress: string};\nconst Crunchy_Natas = ({myuserAddress}: DemnBalanceProps) => \n{\n  const url = `https://staging.api.tzkt.io/v1/bigmaps/16858/keys?active=true&key=${myuserAddress}&select=value`\n  const thisuser = myuserAddress\n  const [demnuseraddress, setdemnUseraddress] = useState<string>('')\n  const { data, error } = useFetch<Post[]>(url)\n  if (error) return <p>There is an error.</p>\n  if (!data) return <span>Loading...</span>\n  if (data.length == 1) \n    {\n      {\n        if (data[0].balance != undefined) \n        {let num = data[0].balance / Math.pow(10, 6);\n          return <span>{num}</span>}\n          }\n    }\n    return <p>0</p>\n    }\nexport default Crunchy_Natas;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}